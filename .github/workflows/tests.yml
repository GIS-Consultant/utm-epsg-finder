#
#name: tests
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#jobs:
#  linting:
#    name: Linting
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2.3.4
#
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: 3.8
#
#      - name: Linting
#        run: |
#          pip install pre-commit
#          pre-commit run --all-files
#
#  tests:
#    needs: linting
#    name: ${{ matrix.os }} / ${{ matrix.python-version }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [Ubuntu]
#        python-version: [3.8]
#      fail-fast: true
#    steps:
#      - uses: actions/checkout@v2.3.4
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install system deps
#        shell: bash
#        run: |
#          pip install nox
#          pip install poetry
#          poetry config virtualenvs.in-project true
#
#      - name: Run mypy with nox
#        shell: bash
#        run: nox --force-color -s mypy-${{ matrix.python-version }}
#
#      - name: Run tests with nox
#        shell: bash
#        run: nox --force-color -s tests-${{ matrix.python-version }}
#
#      - name: Run safety check
#        if: matrix.python-version == 3.8 && matrix.os == 'Ubuntu'
#        shell: bash
#        run: nox --force-color -s safety
#
#      - name: Upload coverage data
#        uses: actions/upload-artifact@v2.2.0
#        with:
#          name: coverage-data
#          path: ".coverage.*"
#
#  coverage:
#    needs: tests
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2.3.4
#
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: 3.8
#
#      - name: Install system deps
#        shell: bash
#        run: |
#          pip install nox
#          pip install poetry
#          poetry config virtualenvs.in-project true
#
#      - name: Download coverage data
#        uses: actions/download-artifact@v2.0.5
#        with:
#          name: coverage-data
#
#      - name: Create coverage report
#        shell: bash
#        run: |
#          nox --force-color --session=coverage -- --fmt xml
#
#      - name: Upload coverage report
#        uses: codecov/codecov-action@v1.0.13
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
